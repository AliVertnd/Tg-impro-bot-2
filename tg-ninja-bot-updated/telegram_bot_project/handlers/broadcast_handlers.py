import logging
import json
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database.database import db_manager
from database.models import User, Account, Group, AutoPost, ActivityLog
from services.scheduler import SchedulerService
from config import Config

logger = logging.getLogger(__name__)

class BroadcastHandlers:
    def __init__(self):
        self.scheduler = None
    
    def set_scheduler(self, scheduler: SchedulerService):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler = scheduler
    
    async def broadcast_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            total_broadcasts = session.query(AutoPost).filter_by(user_id=user.id).count()
            active_broadcasts = session.query(AutoPost).filter_by(
                user_id=user.id, is_active=True
            ).count()
            
            total_sent = session.query(AutoPost).filter_by(
                user_id=user.id
            ).with_entities(
                session.query(AutoPost.total_sent).label('sum')
            ).scalar() or 0
        
        text = f"üì® –ê–≤—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
        text += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {total_broadcasts}\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_broadcasts}\n"
        text += f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_sent}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_create")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="broadcast_list")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="broadcast_stats")],
            [InlineKeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ", callback_data="broadcast_stop_all")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def create_broadcast_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        await self._start_create_broadcast(update, context)
    
    async def _start_create_broadcast(self, update, context):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await self._send_message(update, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            accounts = session.query(Account).filter_by(
                user_id=user.id,
                is_active=True,
                is_banned=False
            ).all()
        
        if not accounts:
            await self._send_message(update, 
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ /add_account"
            )
            return
        
        text = """
üì® –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∏

–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à–∞–≥–æ–≤:

1Ô∏è‚É£ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
2Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
3Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
4Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
5Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Telegram
‚Ä¢ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–ø–∞–º
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: –Ω–µ –º–µ–Ω–µ–µ 1 —á–∞—Å–∞
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø

–ù–∞—á–Ω–µ–º —Å —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:
        """
        
        context.user_data['state'] = 'broadcast_message_input'
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self._send_message(update, text, reply_markup)
    
    async def handle_broadcast_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        state = context.user_data.get('state')
        text = update.message.text.strip()
        user_id = update.effective_user.id
        
        if state == 'broadcast_message_input':
            await self._handle_message_input(update, context, text, user_id)
        elif state == 'broadcast_interval_input':
            await self._handle_interval_input(update, context, text, user_id)
    
    async def _handle_message_input(self, update, context, message_text, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if len(message_text) < 10:
            await update.message.reply_text(
                "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        if len(message_text) > 4000:
            await update.message.reply_text(
                "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        context.user_data['broadcast_message'] = message_text
        
        # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
        keyboard = [
            [InlineKeyboardButton("‚è∞ 1 —á–∞—Å", callback_data="broadcast_interval_3600")],
            [InlineKeyboardButton("‚è∞ 3 —á–∞—Å–∞", callback_data="broadcast_interval_10800")],
            [InlineKeyboardButton("‚è∞ 6 —á–∞—Å–æ–≤", callback_data="broadcast_interval_21600")],
            [InlineKeyboardButton("‚è∞ 12 —á–∞—Å–æ–≤", callback_data="broadcast_interval_43200")],
            [InlineKeyboardButton("‚è∞ 24 —á–∞—Å–∞", callback_data="broadcast_interval_86400")],
            [InlineKeyboardButton("‚öôÔ∏è –°–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="broadcast_interval_custom")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
            f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"{message_text}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏:",
            reply_markup=reply_markup
        )
    
    async def _handle_interval_input(self, update, context, interval_text, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            if interval_text.endswith('–º'):
                interval_seconds = int(interval_text[:-1]) * 60
            elif interval_text.endswith('—á'):
                interval_seconds = int(interval_text[:-1]) * 3600
            elif interval_text.endswith('–¥'):
                interval_seconds = int(interval_text[:-1]) * 86400
            else:
                interval_seconds = int(interval_text) * 60  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –º–∏–Ω—É—Ç–∞—Ö
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            if interval_seconds < Config.MIN_AUTO_POST_INTERVAL:
                await update.message.reply_text(
                    f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {Config.MIN_AUTO_POST_INTERVAL // 60} –º–∏–Ω—É—Ç"
                )
                return
            
            if interval_seconds > Config.MAX_AUTO_POST_INTERVAL:
                await update.message.reply_text(
                    f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {Config.MAX_AUTO_POST_INTERVAL // 3600} —á–∞—Å–æ–≤"
                )
                return
            
            context.user_data['broadcast_interval'] = interval_seconds
            await self._select_account(update, context, user_id)
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.\n"
                "–ü—Ä–∏–º–µ—Ä—ã: 30–º, 2—á, 1–¥ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –≤ –º–∏–Ω—É—Ç–∞—Ö"
            )
    
    async def _select_account(self, update, context, user_id):
        """–í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            accounts = session.query(Account).filter_by(
                user_id=user.id,
                is_active=True,
                is_banned=False
            ).all()
        
        if len(accounts) == 1:
            # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –æ–¥–∏–Ω, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø
            context.user_data['broadcast_account_id'] = accounts[0].id
            await self._select_groups(update, context, user_id)
        else:
            # –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
            keyboard = []
            for account in accounts:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üì± {account.phone_number}",
                        callback_data=f"broadcast_account_{account.id}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = "üì± –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
            await self._send_message(update, text, reply_markup)
    
    async def _select_groups(self, update, context, user_id):
        """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        account_id = context.user_data.get('broadcast_account_id')
        
        with db_manager.get_session() as session:
            account = session.query(Account).filter_by(id=account_id).first()
            if not account:
                await self._send_message(update, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º
            groups = account.groups
        
        if not groups:
            await self._send_message(update, 
                "‚ùå –£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.\n"
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –¥–ª—è –≤—ã–±–æ—Ä–∞
        context.user_data['available_groups'] = [
            {'id': group.id, 'title': group.title, 'selected': False}
            for group in groups
        ]
        
        await self._show_groups_selection(update, context)
    
    async def _show_groups_selection(self, update, context):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –¥–ª—è –≤—ã–±–æ—Ä–∞"""
        groups = context.user_data.get('available_groups', [])
        
        text = "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        
        keyboard = []
        for i, group in enumerate(groups):
            status = "‚úÖ" if group['selected'] else "‚òê"
            keyboard.append([
                InlineKeyboardButton(
                    f"{status} {group['title'][:30]}",
                    callback_data=f"broadcast_group_toggle_{i}"
                )
            ])
        
        selected_count = sum(1 for g in groups if g['selected'])
        
        if selected_count > 0:
            text += f"–í—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø: {selected_count}\n"
            keyboard.append([
                InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_create_final")
            ])
        else:
            text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É\n"
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self._send_message(update, text, reply_markup)
    
    async def _create_final_broadcast(self, update, context, user_id):
        """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            message_text = context.user_data.get('broadcast_message')
            interval_seconds = context.user_data.get('broadcast_interval')
            account_id = context.user_data.get('broadcast_account_id')
            groups = context.user_data.get('available_groups', [])
            
            selected_groups = [g for g in groups if g['selected']]
            
            if not all([message_text, interval_seconds, account_id, selected_groups]):
                await self._send_message(update, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            with db_manager.get_session() as session:
                user = session.query(User).filter_by(telegram_id=user_id).first()
                
                target_group_ids = [g['id'] for g in selected_groups]
                
                auto_post = AutoPost(
                    user_id=user.id,
                    account_id=account_id,
                    message_text=message_text,
                    target_groups=json.dumps(target_group_ids),
                    interval_seconds=interval_seconds,
                    is_active=True,
                    next_post_time=datetime.utcnow() + timedelta(seconds=interval_seconds)
                )
                session.add(auto_post)
                session.flush()
                
                broadcast_id = auto_post.id
                session.commit()
            
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            if self.scheduler:
                self.scheduler.schedule_auto_post(
                    broadcast_id,
                    datetime.utcnow() + timedelta(seconds=interval_seconds)
                )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if interval_seconds >= 86400:
                interval_text = f"{interval_seconds // 86400} –¥–Ω."
            elif interval_seconds >= 3600:
                interval_text = f"{interval_seconds // 3600} —á."
            else:
                interval_text = f"{interval_seconds // 60} –º–∏–Ω."
            
            text = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            text += f"üì® ID —Ä–∞—Å—Å—ã–ª–∫–∏: {broadcast_id}\n"
            text += f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_text}\n"
            text += f"üìã –ì—Ä—É–ø–ø: {len(selected_groups)}\n"
            text += f"üöÄ –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑: {interval_text}\n\n"
            text += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_broadcasts –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏."
            
            await self._send_message(update, text)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            await self._log_activity(
                user_id, account_id, 'broadcast_create',
                f"{len(selected_groups)} groups", 'success',
                f"Created broadcast with {interval_text} interval"
            )
            
            context.user_data.clear()
            
        except Exception as e:
            logger.error(f"Error creating broadcast: {e}")
            await self._send_message(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
    
    async def list_broadcasts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫"""
        user_id = update.effective_user.id
        
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            broadcasts = session.query(AutoPost).filter_by(user_id=user.id).all()
        
        if not broadcasts:
            await update.message.reply_text("üìù –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫")
            return
        
        text = "üì® –í–∞—à–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        for broadcast in broadcasts:
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if broadcast.is_active else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            if broadcast.interval_seconds >= 86400:
                interval_text = f"{broadcast.interval_seconds // 86400} –¥–Ω."
            elif broadcast.interval_seconds >= 3600:
                interval_text = f"{broadcast.interval_seconds // 3600} —á."
            else:
                interval_text = f"{broadcast.interval_seconds // 60} –º–∏–Ω."
            
            target_groups = json.loads(broadcast.target_groups)
            
            text += f"üì® ID: {broadcast.id}\n"
            text += f"   {status}\n"
            text += f"   ‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_text}\n"
            text += f"   üìã –ì—Ä—É–ø–ø: {len(target_groups)}\n"
            text += f"   üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {broadcast.total_sent}\n"
            
            if broadcast.last_sent:
                text += f"   üïê –ü–æ—Å–ª–µ–¥–Ω—è—è: {broadcast.last_sent.strftime('%Y-%m-%d %H:%M')}\n"
            
            if broadcast.is_active and broadcast.next_post_time:
                text += f"   ‚è≠ –°–ª–µ–¥—É—é—â–∞—è: {broadcast.next_post_time.strftime('%Y-%m-%d %H:%M')}\n"
            
            text += f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {broadcast.message_text[:50]}...\n\n"
        
        await update.message.reply_text(text)
    
    async def stop_broadcast_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            active_broadcasts = session.query(AutoPost).filter_by(
                user_id=user.id, is_active=True
            ).all()
        
        if not active_broadcasts:
            await update.message.reply_text("üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫")
            return
        
        keyboard = []
        for broadcast in active_broadcasts:
            keyboard.append([
                InlineKeyboardButton(
                    f"‚èπ ID: {broadcast.id} ({broadcast.message_text[:20]}...)",
                    callback_data=f"broadcast_stop_{broadcast.id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "‚èπ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫"""
        query = update.callback_query
        data = query.data
        user_id = update.effective_user.id
        
        if data == "broadcast_create":
            await self._start_create_broadcast(update, context)
        elif data == "broadcast_list":
            await self.list_broadcasts_command(update, context)
        elif data == "broadcast_stats":
            await self._show_broadcast_stats(update, context)
        elif data == "broadcast_stop_all":
            await self._stop_all_broadcasts(update, context, user_id)
        elif data == "broadcast_cancel":
            context.user_data.clear()
            await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        elif data.startswith("broadcast_interval_"):
            if data == "broadcast_interval_custom":
                context.user_data['state'] = 'broadcast_interval_input'
                await query.edit_message_text(
                    "‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ 30–º - 30 –º–∏–Ω—É—Ç\n"
                    "‚Ä¢ 2—á - 2 —á–∞—Å–∞\n"
                    "‚Ä¢ 1–¥ - 1 –¥–µ–Ω—å\n"
                    "‚Ä¢ 90 - 90 –º–∏–Ω—É—Ç"
                )
            else:
                interval_seconds = int(data.split("_")[2])
                context.user_data['broadcast_interval'] = interval_seconds
                await self._select_account(update, context, user_id)
        elif data.startswith("broadcast_account_"):
            account_id = int(data.split("_")[2])
            context.user_data['broadcast_account_id'] = account_id
            await self._select_groups(update, context, user_id)
        elif data.startswith("broadcast_group_toggle_"):
            group_index = int(data.split("_")[3])
            groups = context.user_data.get('available_groups', [])
            if 0 <= group_index < len(groups):
                groups[group_index]['selected'] = not groups[group_index]['selected']
                context.user_data['available_groups'] = groups
            await self._show_groups_selection(update, context)
        elif data == "broadcast_create_final":
            await self._create_final_broadcast(update, context, user_id)
        elif data.startswith("broadcast_stop_"):
            broadcast_id = int(data.split("_")[2])
            await self._stop_single_broadcast(update, context, broadcast_id, user_id)
    
    async def _show_broadcast_stats(self, update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫"""
        user_id = update.effective_user.id
        
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            broadcasts = session.query(AutoPost).filter_by(user_id=user.id).all()
            
            if not broadcasts:
                await update.callback_query.edit_message_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                return
            
            total_broadcasts = len(broadcasts)
            active_broadcasts = len([b for b in broadcasts if b.is_active])
            total_sent = sum(b.total_sent for b in broadcasts)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
            account_stats = {}
            for broadcast in broadcasts:
                account_phone = broadcast.account.phone_number
                if account_phone not in account_stats:
                    account_stats[account_phone] = {'broadcasts': 0, 'sent': 0}
                account_stats[account_phone]['broadcasts'] += 1
                account_stats[account_phone]['sent'] += broadcast.total_sent
        
        text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫\n\n"
        text += f"üì® –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {total_broadcasts}\n"
        text += f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_broadcasts}\n"
        text += f"üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö: {total_broadcasts - active_broadcasts}\n"
        text += f"üì§ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}\n\n"
        
        if account_stats:
            text += "üì± –ü–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º:\n"
            for phone, stats in account_stats.items():
                text += f"‚Ä¢ {phone}: {stats['broadcasts']} —Ä–∞—Å—Å—ã–ª–æ–∫, {stats['sent']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        
        await update.callback_query.edit_message_text(text)
    
    async def _stop_all_broadcasts(self, update, context, user_id):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
        try:
            with db_manager.get_session() as session:
                user = session.query(User).filter_by(telegram_id=user_id).first()
                if not user:
                    await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                active_broadcasts = session.query(AutoPost).filter_by(
                    user_id=user.id, is_active=True
                ).all()
                
                if not active_broadcasts:
                    await update.callback_query.edit_message_text("üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫")
                    return
                
                # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
                for broadcast in active_broadcasts:
                    broadcast.is_active = False
                    
                    # –û—Ç–º–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
                    if self.scheduler:
                        self.scheduler.cancel_auto_post(broadcast.id)
                
                session.commit()
                
                count = len(active_broadcasts)
                await update.callback_query.edit_message_text(
                    f"‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {count} —Ä–∞—Å—Å—ã–ª–æ–∫"
                )
                
        except Exception as e:
            logger.error(f"Error stopping all broadcasts: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–æ–∫")
    
    async def _stop_single_broadcast(self, update, context, broadcast_id, user_id):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–¥–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            with db_manager.get_session() as session:
                user = session.query(User).filter_by(telegram_id=user_id).first()
                if not user:
                    await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                broadcast = session.query(AutoPost).filter_by(
                    id=broadcast_id, user_id=user.id
                ).first()
                
                if not broadcast:
                    await update.callback_query.edit_message_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                
                if not broadcast.is_active:
                    await update.callback_query.edit_message_text("üìù –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    return
                
                # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
                broadcast.is_active = False
                session.commit()
                
                # –û—Ç–º–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
                if self.scheduler:
                    self.scheduler.cancel_auto_post(broadcast_id)
                
                await update.callback_query.edit_message_text(
                    f"‚èπ –†–∞—Å—Å—ã–ª–∫–∞ ID: {broadcast_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
                )
                
        except Exception as e:
            logger.error(f"Error stopping broadcast {broadcast_id}: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
    
    async def _log_activity(self, user_id, account_id, action_type, target, status, details):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            with db_manager.get_session() as session:
                log = ActivityLog(
                    user_id=session.query(User).filter_by(telegram_id=user_id).first().id,
                    account_id=account_id,
                    action_type=action_type,
                    target=target,
                    status=status,
                    details=details
                )
                session.add(log)
                session.commit()
        except Exception as e:
            logger.error(f"Error logging activity: {e}")
    
    async def _send_message(self, update, text, reply_markup=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)

