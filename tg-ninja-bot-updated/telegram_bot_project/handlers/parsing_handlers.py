import logging
import asyncio
import json
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import ChannelPrivateError, ChatAdminRequiredError, FloodWaitError
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.types import ChannelParticipantsSearch, InputChannel
from database.database import db_manager
from database.models import User, Account, Group, ParsedUser, ActivityLog
from services.encryption import EncryptionService
from config import Config

logger = logging.getLogger(__name__)

class ParsingHandlers:
    def __init__(self):
        self.encryption = EncryptionService()
        self.active_parsing = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
    
    async def parsing_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            parsed_count = session.query(ParsedUser).join(Group).filter(
                Group.id.in_(
                    session.query(Group.id).join(Account).filter(Account.user_id == user.id)
                )
            ).count()
            
            groups_count = session.query(Group).join(Account).filter(
                Account.user_id == user.id
            ).count()
        
        text = f"üë• –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        text += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        text += f"‚Ä¢ –°–ø–∞—Ä—Å–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {parsed_count}\n"
        text += f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø: {groups_count}\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        if user_id in self.active_parsing:
            text += "üîÑ –ê–∫—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
        
        keyboard = [
            [InlineKeyboardButton("üîç –ü–∞—Ä—Å–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="parse_start")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", callback_data="parse_list_groups")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞", callback_data="parse_status")],
            [InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="parse_export")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def parse_group_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã"""
        await self._start_parse_group(update, context)
    
    async def _start_parse_group(self, update, context):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await self._send_message(update, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            accounts = session.query(Account).filter_by(
                user_id=user.id,
                is_active=True,
                is_banned=False
            ).all()
        
        if not accounts:
            await self._send_message(update, 
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ /add_account"
            )
            return
        
        text = """
üîç –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:
‚Ä¢ https://t.me/channel_name
‚Ä¢ @channel_name
‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ (https://t.me/+...)

–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
‚Ä¢ –î–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –≥—Ä—É–ø–ø –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø
        """
        
        context.user_data['state'] = 'parse_group_input'
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="parse_cancel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self._send_message(update, text, reply_markup)
    
    async def handle_parse_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        state = context.user_data.get('state')
        text = update.message.text.strip()
        user_id = update.effective_user.id
        
        if state == 'parse_group_input':
            await self._handle_group_links_input(update, context, text, user_id)
    
    async def _handle_group_links_input(self, update, context, text, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≥—Ä—É–ø–ø—ã"""
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫
        links = [link.strip() for link in text.split('\n') if link.strip()]
        
        if not links:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            accounts = session.query(Account).filter_by(
                user_id=user.id,
                is_active=True,
                is_banned=False
            ).all()
        
        if len(accounts) == 1:
            # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –æ–¥–∏–Ω, —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            await self._start_parsing_process(update, context, links, accounts[0], user_id)
        else:
            # –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
            keyboard = []
            for account in accounts:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üì± {account.phone_number}",
                        callback_data=f"parse_account_{account.id}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="parse_cancel")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            context.user_data['parse_links'] = links
            context.user_data['state'] = 'parse_account_select'
            
            await update.message.reply_text(
                "üì± –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:",
                reply_markup=reply_markup
            )
    
    async def _start_parsing_process(self, update, context, links, account, user_id):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        try:
            # –û—Ç–º–µ—Ç–∫–∞ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            self.active_parsing[user_id] = {
                'status': 'starting',
                'total_links': len(links),
                'processed_links': 0,
                'total_users': 0,
                'start_time': datetime.utcnow()
            }
            
            await self._send_message(update, 
                f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ {len(links)} –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤...\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç: {account.phone_number}"
            )
            
            # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(
                self._parse_groups_background(links, account, user_id)
            )
            
            context.user_data.clear()
            
        except Exception as e:
            logger.error(f"Error starting parsing process: {e}")
            await self._send_message(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞")
            if user_id in self.active_parsing:
                del self.active_parsing[user_id]
    
    async def _parse_groups_background(self, links, account, user_id):
        """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            session_string = self.encryption.decrypt(account.session_string)
            client = TelegramClient(
                StringSession(session_string),
                Config.API_ID,
                Config.API_HASH
            )
            
            await client.connect()
            
            if not await client.is_user_authorized():
                raise Exception("Account is not authorized")
            
            total_parsed = 0
            
            for i, link in enumerate(links):
                try:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                    self.active_parsing[user_id]['status'] = 'parsing'
                    self.active_parsing[user_id]['processed_links'] = i + 1
                    self.active_parsing[user_id]['current_link'] = link
                    
                    # –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã
                    parsed_count = await self._parse_single_group(client, link, account, user_id)
                    total_parsed += parsed_count
                    
                    self.active_parsing[user_id]['total_users'] = total_parsed
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                    await asyncio.sleep(2)
                    
                except Exception as e:
                    logger.error(f"Error parsing group {link}: {e}")
                    await self._log_activity(user_id, account.id, 'parse', link, 'failed', str(e))
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            self.active_parsing[user_id]['status'] = 'completed'
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            file_path = await self._create_export_file(user_id, account.id)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ (–∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞)
            logger.info(f"Parsing completed for user {user_id}: {total_parsed} users parsed")
            
            await client.disconnect()
            
        except Exception as e:
            logger.error(f"Background parsing error for user {user_id}: {e}")
            if user_id in self.active_parsing:
                self.active_parsing[user_id]['status'] = 'error'
                self.active_parsing[user_id]['error'] = str(e)
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å
            await asyncio.sleep(3600)
            if user_id in self.active_parsing:
                del self.active_parsing[user_id]
    
    async def _parse_single_group(self, client, link, account, user_id):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã
            entity = await client.get_entity(link)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
            group = await self._save_group_info(entity, account.id)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = []
            offset = 0
            limit = 200
            
            while True:
                try:
                    if hasattr(entity, 'megagroup') and entity.megagroup:
                        # –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø
                        result = await client(GetParticipantsRequest(
                            channel=entity,
                            filter=ChannelParticipantsSearch(''),
                            offset=offset,
                            limit=limit,
                            hash=0
                        ))
                    else:
                        # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤
                        result = await client.get_participants(
                            entity,
                            limit=limit,
                            offset=offset
                        )
                    
                    if not result.users:
                        break
                    
                    participants.extend(result.users)
                    offset += limit
                    
                    # –ü–∞—É–∑–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ñ–ª—É–¥-–ª–∏–º–∏—Ç–æ–≤
                    await asyncio.sleep(1)
                    
                    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞)
                    if len(participants) >= 10000:
                        break
                        
                except FloodWaitError as e:
                    logger.warning(f"Flood wait for {e.seconds} seconds")
                    await asyncio.sleep(e.seconds)
                except Exception as e:
                    logger.error(f"Error getting participants: {e}")
                    break
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            saved_count = await self._save_parsed_users(participants, group.id)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            await self._log_activity(
                user_id, account.id, 'parse', link, 'success',
                f"Parsed {saved_count} users"
            )
            
            return saved_count
            
        except ChannelPrivateError:
            raise Exception("Channel is private and account is not a member")
        except ChatAdminRequiredError:
            raise Exception("Admin rights required for this group")
        except Exception as e:
            raise Exception(f"Failed to parse group: {str(e)}")
    
    async def _save_group_info(self, entity, account_id):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ"""
        with db_manager.get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
            group = session.query(Group).filter_by(
                telegram_id=str(entity.id)
            ).first()
            
            if not group:
                group = Group(
                    telegram_id=str(entity.id),
                    title=entity.title,
                    username=getattr(entity, 'username', None),
                    is_channel=not getattr(entity, 'megagroup', False),
                    is_private=getattr(entity, 'access_hash', None) is not None,
                    member_count=getattr(entity, 'participants_count', 0),
                    description=getattr(entity, 'about', None)
                )
                session.add(group)
                session.flush()
            else:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                group.title = entity.title
                group.username = getattr(entity, 'username', None)
                group.member_count = getattr(entity, 'participants_count', 0)
                group.description = getattr(entity, 'about', None)
            
            # –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º
            account = session.query(Account).filter_by(id=account_id).first()
            if account and group not in account.groups:
                account.groups.append(group)
            
            session.commit()
            return group
    
    async def _save_parsed_users(self, participants, group_id):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        saved_count = 0
        
        with db_manager.get_session() as session:
            for user in participants:
                if user.bot:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                existing_user = session.query(ParsedUser).filter_by(
                    telegram_id=user.id,
                    source_group_id=group_id
                ).first()
                
                if not existing_user:
                    parsed_user = ParsedUser(
                        telegram_id=user.id,
                        username=user.username,
                        first_name=user.first_name,
                        last_name=user.last_name,
                        phone_number=getattr(user, 'phone', None),
                        source_group_id=group_id,
                        is_bot=user.bot,
                        is_premium=getattr(user, 'premium', False),
                        last_seen=getattr(user, 'status', {}).get('was_online', None) if hasattr(getattr(user, 'status', {}), 'was_online') else None
                    )
                    session.add(parsed_user)
                    saved_count += 1
            
            session.commit()
        
        return saved_count
    
    async def _create_export_file(self, user_id, account_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            with db_manager.get_session() as session:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                parsed_users = session.query(ParsedUser).join(Group).join(
                    Account.groups
                ).filter(Account.id == account_id).all()
                
                if not parsed_users:
                    return None
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                filename = f"parsed_users_{user_id}_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}.txt"
                file_path = os.path.join(Config.DATA_DIR, filename)
                
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write("# –°–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n")
                    f.write(f"# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}\n")
                    f.write(f"# –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(parsed_users)}\n\n")
                    
                    for user in parsed_users:
                        if user.username:
                            f.write(f"@{user.username}\n")
                        elif user.first_name:
                            f.write(f"{user.first_name}")
                            if user.last_name:
                                f.write(f" {user.last_name}")
                            f.write(f" (ID: {user.telegram_id})\n")
                        else:
                            f.write(f"ID: {user.telegram_id}\n")
                
                return file_path
                
        except Exception as e:
            logger.error(f"Error creating export file: {e}")
            return None
    
    async def parse_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        if user_id not in self.active_parsing:
            await update.message.reply_text("üìä –ê–∫—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        status = self.active_parsing[user_id]
        
        text = "üìä –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞:\n\n"
        text += f"üîÑ –°—Ç–∞—Ç—É—Å: {status['status']}\n"
        text += f"üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø: {status['processed_links']}/{status['total_links']}\n"
        text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {status['total_users']}\n"
        
        if 'current_link' in status:
            text += f"üîç –¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: {status['current_link']}\n"
        
        elapsed = datetime.utcnow() - status['start_time']
        text += f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {str(elapsed).split('.')[0]}\n"
        
        if status['status'] == 'error':
            text += f"‚ùå –û—à–∏–±–∫–∞: {status.get('error', 'Unknown error')}\n"
        
        await update.message.reply_text(text)
    
    async def handle_user_list_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        document = update.message.document
        user_id = update.effective_user.id
        
        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            file = await context.bot.get_file(document.file_id)
            file_path = os.path.join(Config.DATA_DIR, f"upload_{user_id}_{document.file_name}")
            await file.download_to_drive(file_path)
            
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
            usernames = []
            for line in content.split('\n'):
                line = line.strip()
                if line and not line.startswith('#'):
                    if line.startswith('@'):
                        usernames.append(line[1:])  # –£–±–∏—Ä–∞–µ–º @
                    elif line:
                        usernames.append(line)
            
            if usernames:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                context.user_data['uploaded_usernames'] = usernames
                
                text = f"üìÅ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                text += f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(usernames)}\n"
                text += f"üìù –ü—Ä–∏–º–µ—Ä—ã:\n"
                
                for i, username in enumerate(usernames[:5]):
                    text += f"‚Ä¢ @{username}\n"
                
                if len(usernames) > 5:
                    text += f"... –∏ –µ—â–µ {len(usernames) - 5}\n"
                
                text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."
                
                await update.message.reply_text(text)
            else:
                await update.message.reply_text("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            os.remove(file_path)
            
        except Exception as e:
            logger.error(f"Error processing user list file: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        query = update.callback_query
        data = query.data
        
        if data == "parse_start":
            await self._start_parse_group(update, context)
        elif data == "parse_status":
            await self.parse_status_command(update, context)
        elif data == "parse_list_groups":
            await self._list_parsed_groups(update, context)
        elif data == "parse_export":
            await self._export_parsed_data(update, context)
        elif data == "parse_cancel":
            context.user_data.clear()
            await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        elif data.startswith("parse_account_"):
            account_id = int(data.split("_")[2])
            await self._handle_account_selection(update, context, account_id)
    
    async def _handle_account_selection(self, update, context, account_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        links = context.user_data.get('parse_links', [])
        
        if not links:
            await update.callback_query.edit_message_text("‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        with db_manager.get_session() as session:
            account = session.query(Account).filter_by(id=account_id).first()
            if not account:
                await update.callback_query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        
        await self._start_parsing_process(update, context, links, account, user_id)
    
    async def _list_parsed_groups(self, update, context):
        """–°–ø–∏—Å–æ–∫ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø"""
        user_id = update.effective_user.id
        
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            groups = session.query(Group).join(Account).filter(
                Account.user_id == user.id
            ).all()
        
        if not groups:
            await update.callback_query.edit_message_text("üìù –ù–µ—Ç —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
            return
        
        text = "üìã –°–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n\n"
        for i, group in enumerate(groups, 1):
            text += f"{i}. {group.title}\n"
            if group.username:
                text += f"   @{group.username}\n"
            text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {group.member_count}\n"
            text += f"   üìä –°–ø–∞—Ä—Å–µ–Ω–æ: {len(group.parsed_users)}\n\n"
        
        await update.callback_query.edit_message_text(text)
    
    async def _export_parsed_data(self, update, context):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        user_id = update.effective_user.id
        
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            account = session.query(Account).filter_by(
                user_id=user.id,
                is_active=True
            ).first()
            
            if not account:
                await update.callback_query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                return
        
        await update.callback_query.edit_message_text("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞...")
        
        file_path = await self._create_export_file(user_id, account.id)
        
        if file_path and os.path.exists(file_path):
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(file_path, 'rb') as f:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=f,
                    filename=os.path.basename(file_path),
                    caption="üìÅ –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                )
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            os.remove(file_path)
            
            await update.callback_query.edit_message_text("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            await update.callback_query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
    
    async def _log_activity(self, user_id, account_id, action_type, target, status, details):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            with db_manager.get_session() as session:
                log = ActivityLog(
                    user_id=session.query(User).filter_by(telegram_id=user_id).first().id,
                    account_id=account_id,
                    action_type=action_type,
                    target=target,
                    status=status,
                    details=details
                )
                session.add(log)
                session.commit()
        except Exception as e:
            logger.error(f"Error logging activity: {e}")
    
    async def _send_message(self, update, text, reply_markup=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)

