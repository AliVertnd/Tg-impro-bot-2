import logging
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database.database import db_manager
from database.models import User, Account, Group, NeuroComment, ActivityLog
from config import Config

logger = logging.getLogger(__name__)

class NeuroHandlers:
    def __init__(self):
        pass
    
    async def neuro_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            total_neuro = session.query(NeuroComment).filter_by(user_id=user.id).count()
            active_neuro = session.query(NeuroComment).filter_by(
                user_id=user.id, is_active=True
            ).count()
            
            total_comments = session.query(NeuroComment).filter_by(
                user_id=user.id
            ).with_entities(
                session.query(NeuroComment.total_comments).label('sum')
            ).scalar() or 0
        
        text = f"üß† –ù–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
        text += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {total_neuro}\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_neuro}\n"
        text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_comments}\n\n"
        
        text += f"‚ÑπÔ∏è –ù–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
        text += f"—É–º–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç–∞–º –≤ –∫–∞–Ω–∞–ª–∞—Ö.\n"
        
        keyboard = [
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥", callback_data="neuro_setup")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫", callback_data="neuro_list")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="neuro_stats")],
            [InlineKeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ", callback_data="neuro_stop_all")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def setup_neuro_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞"""
        await self._start_setup_neuro(update, context)
    
    async def _start_setup_neuro(self, update, context):
        """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è OpenAI API –∫–ª—é—á–∞
        if not Config.OPENAI_API_KEY:
            await self._send_message(update, 
                "‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await self._send_message(update, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            accounts = session.query(Account).filter_by(
                user_id=user.id,
                is_active=True,
                is_banned=False
            ).all()
        
        if not accounts:
            await self._send_message(update, 
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ /add_account"
            )
            return
        
        text = """
üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞

–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à–∞–≥–æ–≤:

1Ô∏è‚É£ –£–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —à–∞–±–ª–æ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
3Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
4Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –¥–µ–Ω—å
5Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
‚Ä¢ –ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª–∞–º
‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Telegram

–ù–∞—á–Ω–µ–º —Å —É–∫–∞–∑–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É):
        """
        
        context.user_data['state'] = 'neuro_channels_input'
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="neuro_cancel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self._send_message(update, text, reply_markup)
    
    async def handle_neuro_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞"""
        state = context.user_data.get('state')
        text = update.message.text.strip()
        user_id = update.effective_user.id
        
        if state == 'neuro_channels_input':
            await self._handle_channels_input(update, context, text, user_id)
        elif state == 'neuro_template_input':
            await self._handle_template_input(update, context, text, user_id)
    
    async def _handle_channels_input(self, update, context, channels_text, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã
        channel_links = [link.strip() for link in channels_text.split('\n') if link.strip()]
        
        if not channel_links:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
        valid_channels = []
        for link in channel_links:
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
            if 't.me/' in link or link.startswith('@'):
                valid_channels.append(link)
        
        if not valid_channels:
            await update.message.reply_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: https://t.me/channel –∏–ª–∏ @channel"
            )
            return
        
        context.user_data['neuro_channels'] = valid_channels
        context.user_data['state'] = 'neuro_template_input'
        
        text = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(valid_channels)}\n\n"
        text += "–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.\n\n"
        text += "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
        text += "‚Ä¢ {post_text} - —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞\n"
        text += "‚Ä¢ {channel_name} - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n"
        text += "‚Ä¢ {random_emoji} - —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏\n\n"
        text += "–ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞:\n"
        text += "\"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ—Å—Ç! {random_emoji} –ß—Ç–æ –¥—É–º–∞–µ—Ç–µ –æ–± —ç—Ç–æ–º?\"\n\n"
        text += "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —à–∞–±–ª–æ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:"
        
        await update.message.reply_text(text)
    
    async def _handle_template_input(self, update, context, template_text, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —à–∞–±–ª–æ–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        if len(template_text) < 10:
            await update.message.reply_text(
                "‚ùå –®–∞–±–ª–æ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        if len(template_text) > 500:
            await update.message.reply_text(
                "‚ùå –®–∞–±–ª–æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        context.user_data['neuro_template'] = template_text
        
        # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –¥–µ–Ω—å
        keyboard = [
            [InlineKeyboardButton("1-3 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", callback_data="neuro_count_3")],
            [InlineKeyboardButton("4-6 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", callback_data="neuro_count_6")],
            [InlineKeyboardButton("7-10 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", callback_data="neuro_count_10")],
            [InlineKeyboardButton("11-15 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", callback_data="neuro_count_15")],
            [InlineKeyboardButton("16-20 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", callback_data="neuro_count_20")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="neuro_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"{template_text}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –¥–µ–Ω—å:",
            reply_markup=reply_markup
        )
    
    async def _select_neuro_account(self, update, context, user_id, comments_per_day):
        """–í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞"""
        context.user_data['neuro_comments_per_day'] = comments_per_day
        
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            accounts = session.query(Account).filter_by(
                user_id=user.id,
                is_active=True,
                is_banned=False
            ).all()
        
        if len(accounts) == 1:
            # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –æ–¥–∏–Ω, —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            await self._create_neuro_comment(update, context, accounts[0], user_id)
        else:
            # –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
            keyboard = []
            for account in accounts:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üì± {account.phone_number}",
                        callback_data=f"neuro_account_{account.id}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="neuro_cancel")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = "üì± –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞:"
            await self._send_message(update, text, reply_markup)
    
    async def _create_neuro_comment(self, update, context, account, user_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞"""
        try:
            channels = context.user_data.get('neuro_channels', [])
            template = context.user_data.get('neuro_template', '')
            comments_per_day = context.user_data.get('neuro_comments_per_day', 5)
            
            if not all([channels, template, comments_per_day]):
                await self._send_message(update, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            with db_manager.get_session() as session:
                user = session.query(User).filter_by(telegram_id=user_id).first()
                
                neuro_comment = NeuroComment(
                    user_id=user.id,
                    account_id=account.id,
                    target_channels=json.dumps(channels),
                    comment_template=template,
                    is_active=True,
                    comments_per_day=comments_per_day
                )
                session.add(neuro_comment)
                session.flush()
                
                neuro_id = neuro_comment.id
                session.commit()
            
            text = f"‚úÖ –ù–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!\n\n"
            text += f"üÜî ID –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {neuro_id}\n"
            text += f"üì± –ê–∫–∫–∞—É–Ω—Ç: {account.phone_number}\n"
            text += f"üì∫ –ö–∞–Ω–∞–ª–æ–≤: {len(channels)}\n"
            text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –¥–µ–Ω—å: {comments_per_day}\n\n"
            text += f"ü§ñ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏\n"
            text += f"–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –Ω–æ–≤—ã–º –ø–æ—Å—Ç–∞–º –≤ –∫–∞–Ω–∞–ª–∞—Ö.\n\n"
            text += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /neuro_status –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
            
            await self._send_message(update, text)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            await self._log_activity(
                user_id, account.id, 'neuro_setup',
                f"{len(channels)} channels", 'success',
                f"Created neuro commenting with {comments_per_day} comments per day"
            )
            
            context.user_data.clear()
            
        except Exception as e:
            logger.error(f"Error creating neuro comment: {e}")
            await self._send_message(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    async def neuro_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            neuro_comments = session.query(NeuroComment).filter_by(user_id=user.id).all()
        
        if not neuro_comments:
            await update.message.reply_text("üìù –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞")
            return
        
        text = "üß† –°—Ç–∞—Ç—É—Å –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞:\n\n"
        for neuro in neuro_comments:
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if neuro.is_active else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            
            channels = json.loads(neuro.target_channels)
            
            text += f"üÜî ID: {neuro.id}\n"
            text += f"   {status}\n"
            text += f"   üì± –ê–∫–∫–∞—É–Ω—Ç: {neuro.account.phone_number}\n"
            text += f"   üì∫ –ö–∞–Ω–∞–ª–æ–≤: {len(channels)}\n"
            text += f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –¥–µ–Ω—å: {neuro.comments_per_day}\n"
            text += f"   üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {neuro.total_comments}\n"
            
            if neuro.last_comment_time:
                text += f"   üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π: {neuro.last_comment_time.strftime('%Y-%m-%d %H:%M')}\n"
            
            text += f"   üìù –®–∞–±–ª–æ–Ω: {neuro.comment_template[:50]}...\n\n"
        
        await update.message.reply_text(text)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞"""
        query = update.callback_query
        data = query.data
        user_id = update.effective_user.id
        
        if data == "neuro_setup":
            await self._start_setup_neuro(update, context)
        elif data == "neuro_list":
            await self._list_neuro_settings(update, context)
        elif data == "neuro_stats":
            await self._show_neuro_stats(update, context)
        elif data == "neuro_stop_all":
            await self._stop_all_neuro(update, context, user_id)
        elif data == "neuro_cancel":
            context.user_data.clear()
            await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        elif data.startswith("neuro_count_"):
            comments_per_day = int(data.split("_")[2])
            await self._select_neuro_account(update, context, user_id, comments_per_day)
        elif data.startswith("neuro_account_"):
            account_id = int(data.split("_")[2])
            await self._handle_neuro_account_selection(update, context, account_id, user_id)
        elif data.startswith("neuro_stop_"):
            neuro_id = int(data.split("_")[2])
            await self._stop_single_neuro(update, context, neuro_id, user_id)
    
    async def _handle_neuro_account_selection(self, update, context, account_id, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞"""
        with db_manager.get_session() as session:
            account = session.query(Account).filter_by(id=account_id).first()
            if not account:
                await update.callback_query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        
        await self._create_neuro_comment(update, context, account, user_id)
    
    async def _list_neuro_settings(self, update, context):
        """–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            neuro_comments = session.query(NeuroComment).filter_by(user_id=user.id).all()
        
        if not neuro_comments:
            await update.callback_query.edit_message_text("üìù –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞")
            return
        
        text = "üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞:\n\n"
        keyboard = []
        
        for neuro in neuro_comments:
            status_emoji = "üü¢" if neuro.is_active else "üî¥"
            channels = json.loads(neuro.target_channels)
            
            text += f"{status_emoji} ID: {neuro.id}\n"
            text += f"   üì± {neuro.account.phone_number}\n"
            text += f"   üì∫ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤\n"
            text += f"   üí¨ {neuro.comments_per_day}/–¥–µ–Ω—å\n"
            text += f"   üìä –°–æ–∑–¥–∞–Ω–æ: {neuro.total_comments}\n\n"
            
            if neuro.is_active:
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID: {neuro.id}",
                        callback_data=f"neuro_stop_{neuro.id}"
                    )
                ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="neuro_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def _show_neuro_stats(self, update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            neuro_comments = session.query(NeuroComment).filter_by(user_id=user.id).all()
            
            if not neuro_comments:
                await update.callback_query.edit_message_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                return
            
            total_settings = len(neuro_comments)
            active_settings = len([n for n in neuro_comments if n.is_active])
            total_comments = sum(n.total_comments for n in neuro_comments)
            total_channels = sum(len(json.loads(n.target_channels)) for n in neuro_comments)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
            account_stats = {}
            for neuro in neuro_comments:
                account_phone = neuro.account.phone_number
                if account_phone not in account_stats:
                    account_stats[account_phone] = {'settings': 0, 'comments': 0}
                account_stats[account_phone]['settings'] += 1
                account_stats[account_phone]['comments'] += neuro.total_comments
        
        text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞\n\n"
        text += f"‚öôÔ∏è –í—Å–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {total_settings}\n"
        text += f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_settings}\n"
        text += f"üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö: {total_settings - active_settings}\n"
        text += f"üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_comments}\n"
        text += f"üì∫ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {total_channels}\n\n"
        
        if account_stats:
            text += "üì± –ü–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º:\n"
            for phone, stats in account_stats.items():
                text += f"‚Ä¢ {phone}: {stats['settings']} –Ω–∞—Å—Ç—Ä–æ–µ–∫, {stats['comments']} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n"
        
        await update.callback_query.edit_message_text(text)
    
    async def _stop_all_neuro(self, update, context, user_id):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞"""
        try:
            with db_manager.get_session() as session:
                user = session.query(User).filter_by(telegram_id=user_id).first()
                if not user:
                    await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                active_neuro = session.query(NeuroComment).filter_by(
                    user_id=user.id, is_active=True
                ).all()
                
                if not active_neuro:
                    await update.callback_query.edit_message_text("üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                    return
                
                # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                for neuro in active_neuro:
                    neuro.is_active = False
                
                session.commit()
                
                count = len(active_neuro)
                await update.callback_query.edit_message_text(
                    f"‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {count} –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞"
                )
                
        except Exception as e:
            logger.error(f"Error stopping all neuro comments: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    async def _stop_single_neuro(self, update, context, neuro_id, user_id):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–¥–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞"""
        try:
            with db_manager.get_session() as session:
                user = session.query(User).filter_by(telegram_id=user_id).first()
                if not user:
                    await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                neuro = session.query(NeuroComment).filter_by(
                    id=neuro_id, user_id=user.id
                ).first()
                
                if not neuro:
                    await update.callback_query.edit_message_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                
                if not neuro.is_active:
                    await update.callback_query.edit_message_text("üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    return
                
                # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                neuro.is_active = False
                session.commit()
                
                await update.callback_query.edit_message_text(
                    f"‚èπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ID: {neuro_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
                )
                
        except Exception as e:
            logger.error(f"Error stopping neuro comment {neuro_id}: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    async def _log_activity(self, user_id, account_id, action_type, target, status, details):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            with db_manager.get_session() as session:
                log = ActivityLog(
                    user_id=session.query(User).filter_by(telegram_id=user_id).first().id,
                    account_id=account_id,
                    action_type=action_type,
                    target=target,
                    status=status,
                    details=details
                )
                session.add(log)
                session.commit()
        except Exception as e:
            logger.error(f"Error logging activity: {e}")
    
    async def _send_message(self, update, text, reply_markup=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)

