import logging
import asyncio
import json
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import (
    PeerFloodError, UserPrivacyRestrictedError, UserNotMutualContactError,
    UserChannelsTooMuchError, FloodWaitError, ChatAdminRequiredError,
    UserAlreadyParticipantError, UserBannedInChannelError
)
from database.database import db_manager
from database.models import User, Account, Group, InviteTask, ActivityLog
from services.encryption import EncryptionService
from config import Config

logger = logging.getLogger(__name__)

class InviteHandlers:
    def __init__(self):
        self.encryption = EncryptionService()
        self.active_invites = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
    
    async def invite_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            total_tasks = session.query(InviteTask).filter_by(user_id=user.id).count()
            completed_tasks = session.query(InviteTask).filter_by(
                user_id=user.id, status='completed'
            ).count()
            
            total_invited = session.query(InviteTask).filter_by(
                user_id=user.id
            ).with_entities(
                session.query(InviteTask.invited_count).label('sum')
            ).scalar() or 0
        
        text = f"üéØ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        text += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
        text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_tasks}\n"
        text += f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_invited}\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
        if user_id in self.active_invites:
            text += "üîÑ –ê–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–∞–π—Ç–∏–Ω–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
        
        keyboard = [
            [InlineKeyboardButton("üéØ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="invite_start")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="invite_list_tasks")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞", callback_data="invite_status")],
            [InlineKeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥", callback_data="invite_stop")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def invite_users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        await self._start_invite_process(update, context)
    
    async def _start_invite_process(self, update, context):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await self._send_message(update, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            accounts = session.query(Account).filter_by(
                user_id=user.id,
                is_active=True,
                is_banned=False
            ).all()
        
        if not accounts:
            await self._send_message(update, 
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ /add_account"
            )
            return
        
        text = """
üéØ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—É

–ü—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à–∞–≥–æ–≤:

1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ñ–∞–π–ª .txt –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é)
4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
5Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ª–∏–º–∏—Ç—ã Telegram (–Ω–µ –±–æ–ª–µ–µ 50 –∏–Ω–≤–∞–π—Ç–æ–≤ –≤ —á–∞—Å)

–ù–∞—á–Ω–µ–º —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É:
        """
        
        context.user_data['state'] = 'invite_group_input'
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="invite_cancel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self._send_message(update, text, reply_markup)
    
    async def handle_invite_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
        state = context.user_data.get('state')
        text = update.message.text.strip()
        user_id = update.effective_user.id
        
        if state == 'invite_group_input':
            await self._handle_group_input(update, context, text, user_id)
        elif state == 'invite_users_input':
            await self._handle_users_input(update, context, text, user_id)
    
    async def _handle_group_input(self, update, context, group_link, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            with db_manager.get_session() as session:
                user = session.query(User).filter_by(telegram_id=user_id).first()
                account = session.query(Account).filter_by(
                    user_id=user.id,
                    is_active=True,
                    is_banned=False
                ).first()
                
                if not account:
                    await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ
                session_string = self.encryption.decrypt(account.session_string)
                client = TelegramClient(
                    StringSession(session_string),
                    Config.API_ID,
                    Config.API_HASH
                )
                
                await client.connect()
                
                try:
                    entity = await client.get_entity(group_link)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    permissions = await client.get_permissions(entity, 'me')
                    if not permissions.is_admin:
                        await update.message.reply_text(
                            "‚ùå –ê–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ"
                        )
                        await client.disconnect()
                        return
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
                    group = session.query(Group).filter_by(
                        telegram_id=str(entity.id)
                    ).first()
                    
                    if not group:
                        group = Group(
                            telegram_id=str(entity.id),
                            title=entity.title,
                            username=getattr(entity, 'username', None),
                            is_channel=not getattr(entity, 'megagroup', False),
                            member_count=getattr(entity, 'participants_count', 0)
                        )
                        session.add(group)
                        session.flush()
                    
                    context.user_data['target_group_id'] = group.id
                    context.user_data['state'] = 'invite_users_input'
                    
                    await update.message.reply_text(
                        f"‚úÖ –ì—Ä—É–ø–ø–∞ '{entity.title}' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞:\n"
                        "‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª .txt —Å–æ —Å–ø–∏—Å–∫–æ–º\n"
                        "‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ usernames —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n"
                        "‚Ä¢ –§–æ—Ä–º–∞—Ç: @username –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ username"
                    )
                    
                    session.commit()
                    
                except Exception as e:
                    await update.message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ: {str(e)}"
                    )
                finally:
                    await client.disconnect()
                    
        except Exception as e:
            logger.error(f"Error handling group input: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã")
    
    async def _handle_users_input(self, update, context, text, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        usernames = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if 'uploaded_usernames' in context.user_data:
            usernames = context.user_data['uploaded_usernames']
            del context.user_data['uploaded_usernames']
        else:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            for line in text.replace(',', '\n').split('\n'):
                username = line.strip()
                if username:
                    if username.startswith('@'):
                        username = username[1:]
                    if username:
                        usernames.append(username)
        
        if not usernames:
            await update.message.reply_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            accounts = session.query(Account).filter_by(
                user_id=user.id,
                is_active=True,
                is_banned=False
            ).all()
        
        context.user_data['invite_usernames'] = usernames
        
        if len(accounts) == 1:
            # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –æ–¥–∏–Ω, —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–≤–∞–π—Ç–∏–Ω–≥
            await self._start_invite_task(update, context, accounts[0], user_id)
        else:
            # –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
            keyboard = []
            for account in accounts:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üì± {account.phone_number}",
                        callback_data=f"invite_account_{account.id}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="invite_cancel")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            context.user_data['state'] = 'invite_account_select'
            
            await update.message.reply_text(
                f"üì± –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ {len(usernames)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
                reply_markup=reply_markup
            )
    
    async def _start_invite_task(self, update, context, account, user_id):
        """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
        try:
            target_group_id = context.user_data.get('target_group_id')
            usernames = context.user_data.get('invite_usernames', [])
            
            if not target_group_id or not usernames:
                await self._send_message(update, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            with db_manager.get_session() as session:
                user = session.query(User).filter_by(telegram_id=user_id).first()
                
                invite_task = InviteTask(
                    user_id=user.id,
                    account_id=account.id,
                    target_group_id=target_group_id,
                    user_list=json.dumps(usernames),
                    status='pending'
                )
                session.add(invite_task)
                session.flush()
                
                task_id = invite_task.id
                session.commit()
            
            # –û—Ç–º–µ—Ç–∫–∞ –æ –Ω–∞—á–∞–ª–µ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
            self.active_invites[user_id] = {
                'task_id': task_id,
                'status': 'starting',
                'total_users': len(usernames),
                'processed_users': 0,
                'invited_count': 0,
                'failed_count': 0,
                'start_time': datetime.utcnow()
            }
            
            await self._send_message(update, 
                f"üîÑ –ù–∞—á–∏–Ω–∞—é –∏–Ω–≤–∞–π—Ç–∏–Ω–≥ {len(usernames)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç: {account.phone_number}\n\n"
                f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–æ–≤ Telegram"
            )
            
            # –ó–∞–ø—É—Å–∫ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(
                self._invite_users_background(task_id, account, user_id)
            )
            
            context.user_data.clear()
            
        except Exception as e:
            logger.error(f"Error starting invite task: {e}")
            await self._send_message(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞")
            if user_id in self.active_invites:
                del self.active_invites[user_id]
    
    async def _invite_users_background(self, task_id, account, user_id):
        """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏
            with db_manager.get_session() as session:
                task = session.query(InviteTask).filter_by(id=task_id).first()
                if not task:
                    raise Exception("Task not found")
                
                usernames = json.loads(task.user_list)
                target_group = session.query(Group).filter_by(id=task.target_group_id).first()
                
                if not target_group:
                    raise Exception("Target group not found")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            session_string = self.encryption.decrypt(account.session_string)
            client = TelegramClient(
                StringSession(session_string),
                Config.API_ID,
                Config.API_HASH
            )
            
            await client.connect()
            
            if not await client.is_user_authorized():
                raise Exception("Account is not authorized")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã
            group_entity = await client.get_entity(int(target_group.telegram_id))
            
            invited_count = 0
            failed_count = 0
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
            with db_manager.get_session() as session:
                task = session.query(InviteTask).filter_by(id=task_id).first()
                task.status = 'in_progress'
                session.commit()
            
            for i, username in enumerate(usernames):
                try:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                    if user_id in self.active_invites:
                        self.active_invites[user_id]['status'] = 'inviting'
                        self.active_invites[user_id]['processed_users'] = i + 1
                        self.active_invites[user_id]['current_user'] = username
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
                    try:
                        user_entity = await client.get_entity(username)
                        await client.invite_to_chat(group_entity, user_entity)
                        invited_count += 1
                        
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        if user_id in self.active_invites:
                            self.active_invites[user_id]['invited_count'] = invited_count
                        
                        logger.info(f"Successfully invited {username} to group")
                        
                    except UserAlreadyParticipantError:
                        logger.info(f"User {username} is already in the group")
                        continue
                    except UserPrivacyRestrictedError:
                        logger.warning(f"User {username} has privacy restrictions")
                        failed_count += 1
                    except UserNotMutualContactError:
                        logger.warning(f"User {username} is not a mutual contact")
                        failed_count += 1
                    except UserChannelsTooMuchError:
                        logger.warning(f"User {username} is in too many channels")
                        failed_count += 1
                    except UserBannedInChannelError:
                        logger.warning(f"User {username} is banned in the channel")
                        failed_count += 1
                    except PeerFloodError:
                        logger.error("Peer flood error - too many requests")
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –ø—Ä–∏ —Ñ–ª—É–¥-–æ—à–∏–±–∫–µ
                        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                        failed_count += 1
                    except FloodWaitError as e:
                        logger.warning(f"Flood wait for {e.seconds} seconds")
                        await asyncio.sleep(e.seconds)
                        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                        try:
                            await client.invite_to_chat(group_entity, user_entity)
                            invited_count += 1
                        except:
                            failed_count += 1
                    except Exception as e:
                        logger.error(f"Error inviting {username}: {e}")
                        failed_count += 1
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–∞—Ö
                    if user_id in self.active_invites:
                        self.active_invites[user_id]['failed_count'] = failed_count
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏–Ω–≤–∞–π—Ç–∞–º–∏ (–≤–∞–∂–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫)
                    await asyncio.sleep(30)  # 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∏–Ω–≤–∞–π—Ç–∞–º–∏
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ (–Ω–µ –±–æ–ª–µ–µ 50 –≤ —á–∞—Å)
                    if invited_count >= Config.MAX_INVITES_PER_HOUR:
                        logger.info("Hourly invite limit reached, pausing...")
                        await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å
                        invited_count = 0  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
                    
                except Exception as e:
                    logger.error(f"Error processing user {username}: {e}")
                    failed_count += 1
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            with db_manager.get_session() as session:
                task = session.query(InviteTask).filter_by(id=task_id).first()
                task.status = 'completed'
                task.invited_count = invited_count
                task.failed_count = failed_count
                session.commit()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            if user_id in self.active_invites:
                self.active_invites[user_id]['status'] = 'completed'
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await self._log_activity(
                user_id, account.id, 'invite', target_group.title,
                'success', f"Invited {invited_count} users, failed {failed_count}"
            )
            
            logger.info(f"Invite task {task_id} completed: {invited_count} invited, {failed_count} failed")
            
            await client.disconnect()
            
        except Exception as e:
            logger.error(f"Background invite error for task {task_id}: {e}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏
            with db_manager.get_session() as session:
                task = session.query(InviteTask).filter_by(id=task_id).first()
                if task:
                    task.status = 'failed'
                    task.error_message = str(e)
                    session.commit()
            
            if user_id in self.active_invites:
                self.active_invites[user_id]['status'] = 'error'
                self.active_invites[user_id]['error'] = str(e)
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å
            await asyncio.sleep(3600)
            if user_id in self.active_invites:
                del self.active_invites[user_id]
    
    async def invite_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        if user_id not in self.active_invites:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–¥–∞—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            with db_manager.get_session() as session:
                user = session.query(User).filter_by(telegram_id=user_id).first()
                if not user:
                    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                recent_tasks = session.query(InviteTask).filter_by(
                    user_id=user.id
                ).order_by(InviteTask.created_at.desc()).limit(5).all()
                
                if not recent_tasks:
                    await update.message.reply_text("üìä –ù–µ—Ç –∑–∞–¥–∞—á –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞")
                    return
                
                text = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞:\n\n"
                for task in recent_tasks:
                    status_emoji = {
                        'pending': '‚è≥',
                        'in_progress': 'üîÑ',
                        'completed': '‚úÖ',
                        'failed': '‚ùå'
                    }.get(task.status, '‚ùì')
                    
                    text += f"{status_emoji} ID: {task.id}\n"
                    text += f"   –°—Ç–∞—Ç—É—Å: {task.status}\n"
                    text += f"   –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {task.invited_count}\n"
                    text += f"   –û—à–∏–±–æ–∫: {task.failed_count}\n"
                    text += f"   –î–∞—Ç–∞: {task.created_at.strftime('%Y-%m-%d %H:%M')}\n\n"
                
                await update.message.reply_text(text)
                return
        
        status = self.active_invites[user_id]
        
        text = "üìä –°—Ç–∞—Ç—É—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞:\n\n"
        text += f"üîÑ –°—Ç–∞—Ç—É—Å: {status['status']}\n"
        text += f"üë• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {status['processed_users']}/{status['total_users']}\n"
        text += f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {status['invited_count']}\n"
        text += f"‚ùå –û—à–∏–±–æ–∫: {status['failed_count']}\n"
        
        if 'current_user' in status:
            text += f"üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{status['current_user']}\n"
        
        elapsed = datetime.utcnow() - status['start_time']
        text += f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {str(elapsed).split('.')[0]}\n"
        
        if status['status'] == 'error':
            text += f"‚ùå –û—à–∏–±–∫–∞: {status.get('error', 'Unknown error')}\n"
        
        await update.message.reply_text(text)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
        query = update.callback_query
        data = query.data
        
        if data == "invite_start":
            await self._start_invite_process(update, context)
        elif data == "invite_status":
            await self.invite_status_command(update, context)
        elif data == "invite_list_tasks":
            await self._list_invite_tasks(update, context)
        elif data == "invite_stop":
            await self._stop_invite_process(update, context)
        elif data == "invite_cancel":
            context.user_data.clear()
            await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        elif data.startswith("invite_account_"):
            account_id = int(data.split("_")[2])
            await self._handle_account_selection(update, context, account_id)
    
    async def _handle_account_selection(self, update, context, account_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        with db_manager.get_session() as session:
            account = session.query(Account).filter_by(id=account_id).first()
            if not account:
                await update.callback_query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        
        await self._start_invite_task(update, context, account, user_id)
    
    async def _list_invite_tasks(self, update, context):
        """–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            tasks = session.query(InviteTask).filter_by(
                user_id=user.id
            ).order_by(InviteTask.created_at.desc()).limit(10).all()
        
        if not tasks:
            await update.callback_query.edit_message_text("üìù –ù–µ—Ç –∑–∞–¥–∞—á –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞")
            return
        
        text = "üìã –ó–∞–¥–∞—á–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞:\n\n"
        for task in tasks:
            status_emoji = {
                'pending': '‚è≥',
                'in_progress': 'üîÑ',
                'completed': '‚úÖ',
                'failed': '‚ùå'
            }.get(task.status, '‚ùì')
            
            text += f"{status_emoji} ID: {task.id}\n"
            text += f"   –ì—Ä—É–ø–ø–∞: {task.target_group.title}\n"
            text += f"   –ê–∫–∫–∞—É–Ω—Ç: {task.account.phone_number}\n"
            text += f"   –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {task.invited_count}\n"
            text += f"   –û—à–∏–±–æ–∫: {task.failed_count}\n"
            text += f"   –î–∞—Ç–∞: {task.created_at.strftime('%Y-%m-%d %H:%M')}\n\n"
        
        await update.callback_query.edit_message_text(text)
    
    async def _stop_invite_process(self, update, context):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        if user_id not in self.active_invites:
            await update.callback_query.edit_message_text("üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞")
            return
        
        # –û—Ç–º–µ—Ç–∫–∞ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        self.active_invites[user_id]['status'] = 'stopped'
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        task_id = self.active_invites[user_id]['task_id']
        with db_manager.get_session() as session:
            task = session.query(InviteTask).filter_by(id=task_id).first()
            if task:
                task.status = 'failed'
                task.error_message = 'Stopped by user'
                session.commit()
        
        await update.callback_query.edit_message_text("‚èπ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        del self.active_invites[user_id]
    
    async def _log_activity(self, user_id, account_id, action_type, target, status, details):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            with db_manager.get_session() as session:
                log = ActivityLog(
                    user_id=session.query(User).filter_by(telegram_id=user_id).first().id,
                    account_id=account_id,
                    action_type=action_type,
                    target=target,
                    status=status,
                    details=details
                )
                session.add(log)
                session.commit()
        except Exception as e:
            logger.error(f"Error logging activity: {e}")
    
    async def _send_message(self, update, text, reply_markup=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)

