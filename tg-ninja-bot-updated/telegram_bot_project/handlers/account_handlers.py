import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import PhoneNumberInvalidError, PhoneCodeInvalidError, PasswordHashInvalidError
from database.database import db_manager
from database.models import User, Account
from config import Config
from services.encryption import EncryptionService

logger = logging.getLogger(__name__)

class AccountHandlers:
    def __init__(self):
        self.encryption = EncryptionService()
        self.active_sessions = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    async def accounts_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            accounts = session.query(Account).filter_by(user_id=user.id).all()
        
        text = f"üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏\n\n"
        text += f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n"
        text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {len([a for a in accounts if a.is_active])}\n\n"
        
        if accounts:
            text += "üìã –í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã:\n"
            for i, account in enumerate(accounts, 1):
                status = "‚úÖ" if account.is_active else "‚ùå"
                banned = "üö´" if account.is_banned else ""
                text += f"{i}. {status} {account.phone_number} {banned}\n"
        else:
            text += "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="account_add")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="account_list")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="account_remove")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="account_refresh")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def add_account_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        await self._start_add_account(update, context)
    
    async def _start_add_account(self, update, context):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        text = """
üì± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞

–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:
1. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX)
2. –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ SMS
3. –ü–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
‚Ä¢ –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:
        """
        
        context.user_data['state'] = 'add_account_phone'
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="account_cancel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def handle_account_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        state = context.user_data.get('state')
        text = update.message.text.strip()
        user_id = update.effective_user.id
        
        if state == 'add_account_phone':
            await self._handle_phone_input(update, context, text, user_id)
        elif state == 'add_account_code':
            await self._handle_code_input(update, context, text, user_id)
        elif state == 'add_account_password':
            await self._handle_password_input(update, context, text, user_id)
    
    async def _handle_phone_input(self, update, context, phone, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not phone.startswith('+') or len(phone) < 10:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX"
            )
            return
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram
            client = TelegramClient(
                StringSession(),
                Config.API_ID,
                Config.API_HASH
            )
            
            await client.connect()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            result = await client.send_code_request(phone)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
            session_key = f"{user_id}_{phone}"
            self.active_sessions[session_key] = {
                'client': client,
                'phone': phone,
                'phone_code_hash': result.phone_code_hash
            }
            
            context.user_data['state'] = 'add_account_code'
            context.user_data['session_key'] = session_key
            
            await update.message.reply_text(
                f"üì± –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {phone}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:"
            )
            
        except PhoneNumberInvalidError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞."
            )
        except Exception as e:
            logger.error(f"Error sending code to {phone}: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def _handle_code_input(self, update, context, code, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        session_key = context.user_data.get('session_key')
        if not session_key or session_key not in self.active_sessions:
            await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            context.user_data.clear()
            return
        
        session_data = self.active_sessions[session_key]
        client = session_data['client']
        phone = session_data['phone']
        phone_code_hash = session_data['phone_code_hash']
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫–æ–¥–æ–º
            await client.sign_in(
                phone=phone,
                code=code,
                phone_code_hash=phone_code_hash
            )
            
            # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            await self._save_account(client, phone, user_id)
            await update.message.reply_text(
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
            )
            
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await client.disconnect()
            del self.active_sessions[session_key]
            context.user_data.clear()
            
        except PhoneCodeInvalidError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
        except Exception as e:
            if "Two-step verification is enabled" in str(e):
                context.user_data['state'] = 'add_account_password'
                await update.message.reply_text(
                    "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:"
                )
            else:
                logger.error(f"Error signing in with code for {phone}: {e}")
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
    
    async def _handle_password_input(self, update, context, password, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        session_key = context.user_data.get('session_key')
        if not session_key or session_key not in self.active_sessions:
            await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            context.user_data.clear()
            return
        
        session_data = self.active_sessions[session_key]
        client = session_data['client']
        phone = session_data['phone']
        
        try:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–∞—Ä–æ–ª–µ–º
            await client.sign_in(password=password)
            
            # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            await self._save_account(client, phone, user_id)
            await update.message.reply_text(
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
            )
            
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await client.disconnect()
            del self.active_sessions[session_key]
            context.user_data.clear()
            
        except PasswordHashInvalidError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
        except Exception as e:
            logger.error(f"Error signing in with password for {phone}: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
    
    async def _save_account(self, client, phone, user_id):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await client.get_me()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Å—Å–∏–∏
            session_string = client.session.save()
            
            # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            encrypted_session = self.encryption.encrypt(session_string)
            
            with db_manager.get_session() as session:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = session.query(User).filter_by(telegram_id=user_id).first()
                if not user:
                    raise Exception("User not found")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
                existing_account = session.query(Account).filter_by(
                    phone_number=phone
                ).first()
                
                if existing_account:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    existing_account.session_string = encrypted_session
                    existing_account.username = me.username
                    existing_account.first_name = me.first_name
                    existing_account.last_name = me.last_name
                    existing_account.is_active = True
                    existing_account.is_banned = False
                else:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    account = Account(
                        user_id=user.id,
                        phone_number=phone,
                        username=me.username,
                        first_name=me.first_name,
                        last_name=me.last_name,
                        session_string=encrypted_session,
                        is_active=True
                    )
                    session.add(account)
                
                session.commit()
                logger.info(f"Account {phone} saved for user {user_id}")
                
        except Exception as e:
            logger.error(f"Failed to save account {phone}: {e}")
            raise
    
    async def list_accounts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        user_id = update.effective_user.id
        
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            accounts = session.query(Account).filter_by(user_id=user.id).all()
        
        if not accounts:
            await update.message.reply_text("üìù –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return
        
        text = "üì± –í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã:\n\n"
        for i, account in enumerate(accounts, 1):
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if account.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            banned = " üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if account.is_banned else ""
            
            text += f"{i}. {account.phone_number}\n"
            text += f"   üë§ {account.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
            if account.username:
                text += f" (@{account.username})"
            text += f"\n   {status}{banned}\n\n"
        
        await update.message.reply_text(text)
    
    async def remove_account_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        user_id = update.effective_user.id
        
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            accounts = session.query(Account).filter_by(user_id=user.id).all()
        
        if not accounts:
            await update.message.reply_text("üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        keyboard = []
        for account in accounts:
            keyboard.append([
                InlineKeyboardButton(
                    f"üóë {account.phone_number}",
                    callback_data=f"account_delete_{account.id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="account_cancel")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        query = update.callback_query
        data = query.data
        
        if data == "account_add":
            await self._start_add_account(update, context)
        elif data == "account_list":
            await self.list_accounts_command(update, context)
        elif data == "account_remove":
            await self.remove_account_command(update, context)
        elif data == "account_refresh":
            await self._refresh_accounts_status(update, context)
        elif data == "account_cancel":
            context.user_data.clear()
            await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        elif data.startswith("account_delete_"):
            account_id = int(data.split("_")[2])
            await self._delete_account(update, context, account_id)
    
    async def _refresh_accounts_status(self, update, context):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        user_id = update.effective_user.id
        
        await update.callback_query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        
        try:
            with db_manager.get_session() as session:
                user = session.query(User).filter_by(telegram_id=user_id).first()
                if not user:
                    await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                accounts = session.query(Account).filter_by(user_id=user.id).all()
                
                updated_count = 0
                for account in accounts:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
                        session_string = self.encryption.decrypt(account.session_string)
                        client = TelegramClient(
                            StringSession(session_string),
                            Config.API_ID,
                            Config.API_HASH
                        )
                        
                        await client.connect()
                        
                        if await client.is_user_authorized():
                            account.is_active = True
                            account.is_banned = False
                            updated_count += 1
                        else:
                            account.is_active = False
                        
                        await client.disconnect()
                        
                    except Exception as e:
                        logger.error(f"Error checking account {account.phone_number}: {e}")
                        account.is_active = False
                        if "banned" in str(e).lower():
                            account.is_banned = True
                
                session.commit()
            
            await update.callback_query.edit_message_text(
                f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {updated_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
            )
            
        except Exception as e:
            logger.error(f"Error refreshing accounts status: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
            )
    
    async def _delete_account(self, update, context, account_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        user_id = update.effective_user.id
        
        try:
            with db_manager.get_session() as session:
                user = session.query(User).filter_by(telegram_id=user_id).first()
                if not user:
                    await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                account = session.query(Account).filter_by(
                    id=account_id,
                    user_id=user.id
                ).first()
                
                if not account:
                    await update.callback_query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                phone = account.phone_number
                session.delete(account)
                session.commit()
            
            await update.callback_query.edit_message_text(
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
            )
            
        except Exception as e:
            logger.error(f"Error deleting account {account_id}: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"
            )

