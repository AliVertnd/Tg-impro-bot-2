import logging
import json
import random
import asyncio
from datetime import datetime, timedelta
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import FloodWaitError, ChatWriteForbiddenError, MessageNotModifiedError
from telethon.tl.types import Message
import openai
from database.database import db_manager
from database.models import NeuroComment, Account, ActivityLog
from services.encryption import EncryptionService
from config import Config

logger = logging.getLogger(__name__)

class NeuroService:
    def __init__(self):
        self.encryption = EncryptionService()
        self.openai_client = openai.OpenAI(
            api_key=Config.OPENAI_API_KEY,
            base_url=Config.OPENAI_API_BASE
        ) if Config.OPENAI_API_KEY else None
        
        # –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        self.random_emojis = [
            "üòä", "üëç", "üî•", "üíØ", "‚ú®", "üéØ", "üí™", "üöÄ", "‚≠ê", "üëè",
            "ü§î", "üí≠", "üìù", "üéâ", "üåü", "üí°", "üîî", "üì¢", "üéä", "üôå"
        ]
    
    async def execute_neuro_comment(self, neuro_comment_id):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if not self.openai_client:
                logger.error("OpenAI client not initialized")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            with db_manager.get_session() as session:
                neuro_comment = session.query(NeuroComment).filter_by(
                    id=neuro_comment_id
                ).first()
                
                if not neuro_comment or not neuro_comment.is_active:
                    logger.info(f"Neuro comment {neuro_comment_id} not found or inactive")
                    return
                
                account = neuro_comment.account
                if not account or not account.is_active or account.is_banned:
                    logger.warning(f"Account for neuro comment {neuro_comment_id} is not available")
                    return
                
                target_channels = json.loads(neuro_comment.target_channels)
                
                if not target_channels:
                    logger.warning(f"No target channels for neuro comment {neuro_comment_id}")
                    return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            session_string = self.encryption.decrypt(account.session_string)
            client = TelegramClient(
                StringSession(session_string),
                Config.API_ID,
                Config.API_HASH
            )
            
            await client.connect()
            
            if not await client.is_user_authorized():
                logger.error(f"Account {account.phone_number} is not authorized")
                await self._mark_account_inactive(account.id)
                return
            
            # –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            commented_count = 0
            
            for channel_link in target_channels:
                try:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
                    channel_entity = await client.get_entity(channel_link)
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    messages = await client.get_messages(channel_entity, limit=5)
                    
                    for message in messages:
                        if isinstance(message, Message) and message.text:
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç
                            if await self._should_comment_post(message, neuro_comment):
                                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                                comment_text = await self._generate_comment(
                                    message.text,
                                    channel_entity.title,
                                    neuro_comment.comment_template
                                )
                                
                                if comment_text:
                                    try:
                                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                                        await client.send_message(
                                            channel_entity,
                                            comment_text,
                                            reply_to=message.id
                                        )
                                        
                                        commented_count += 1
                                        logger.info(f"Comment sent to {channel_entity.title}")
                                        
                                        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
                                        await asyncio.sleep(random.randint(30, 60))
                                        
                                        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞ —Ä–∞–∑
                                        if commented_count >= 3:
                                            break
                                        
                                    except ChatWriteForbiddenError:
                                        logger.warning(f"No permission to comment in {channel_entity.title}")
                                    except FloodWaitError as e:
                                        logger.warning(f"Flood wait for {e.seconds} seconds")
                                        await asyncio.sleep(e.seconds)
                                    except Exception as e:
                                        logger.error(f"Error sending comment to {channel_entity.title}: {e}")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
                    await asyncio.sleep(random.randint(10, 30))
                    
                except Exception as e:
                    logger.error(f"Error processing channel {channel_link}: {e}")
                    continue
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if commented_count > 0:
                with db_manager.get_session() as session:
                    neuro_comment = session.query(NeuroComment).filter_by(
                        id=neuro_comment_id
                    ).first()
                    
                    if neuro_comment:
                        neuro_comment.total_comments += commented_count
                        neuro_comment.last_comment_time = datetime.utcnow()
                        session.commit()
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                await self._log_neuro_activity(
                    neuro_comment.user_id, account.id, 'neuro_comment',
                    f"{len(target_channels)} channels", 'success',
                    f"Created {commented_count} comments"
                )
            
            logger.info(f"Neuro comment {neuro_comment_id} completed: {commented_count} comments created")
            
            await client.disconnect()
            
        except Exception as e:
            logger.error(f"Error executing neuro comment {neuro_comment_id}: {e}")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            try:
                with db_manager.get_session() as session:
                    neuro_comment = session.query(NeuroComment).filter_by(
                        id=neuro_comment_id
                    ).first()
                    
                    if neuro_comment:
                        await self._log_neuro_activity(
                            neuro_comment.user_id, neuro_comment.account_id,
                            'neuro_comment', 'error', 'failed', str(e)
                        )
            except:
                pass
    
    async def _should_comment_post(self, message, neuro_comment):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ—Å—Ç–∞ (–Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã)
            if message.date < datetime.utcnow() - timedelta(hours=24):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–æ—Å—Ç–∞ (–Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ)
            if len(message.text) < 50:
                return False
            
            # –°–ª—É—á–∞–π–Ω–æ—Å—Ç—å (–Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–¥—Ä—è–¥)
            if random.random() > 0.3:  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-—Å–ª–æ–≤–∞ (–∏–∑–±–µ–≥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã)
            spam_words = ['—Ä–µ–∫–ª–∞–º–∞', '—Å–∫–∏–¥–∫–∞', '–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–ø—Ä–æ–º–æ–∫–æ–¥']
            text_lower = message.text.lower()
            if any(word in text_lower for word in spam_words):
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"Error checking if should comment post: {e}")
            return False
    
    async def _generate_comment(self, post_text, channel_name, template):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –ø–æ–º–æ—â—å—é OpenAI"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            random_emoji = random.choice(self.random_emojis)
            
            # –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω–µ
            comment_base = template.format(
                post_text=post_text[:100] + "..." if len(post_text) > 100 else post_text,
                channel_name=channel_name,
                random_emoji=random_emoji
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è OpenAI
            prompt = f"""
–°–æ–∑–¥–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –≤ Telegram –∫–∞–Ω–∞–ª–µ.

–ü–æ—Å—Ç: "{post_text[:200]}..."
–ö–∞–Ω–∞–ª: {channel_name}
–ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω: {comment_base}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º
- –î–ª–∏–Ω–∞: 20-100 —Å–∏–º–≤–æ–ª–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω
- –ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∞–º-—Å–ª–æ–≤–∞
- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é

–°–æ–∑–¥–∞–π —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
"""
            
            # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
            response = await asyncio.to_thread(
                self.openai_client.chat.completions.create,
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ Telegram."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=100,
                temperature=0.8
            )
            
            generated_comment = response.choices[0].message.content.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            if len(generated_comment) < 10 or len(generated_comment) > 200:
                # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
                return comment_base
            
            return generated_comment
            
        except Exception as e:
            logger.error(f"Error generating comment with OpenAI: {e}")
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            random_emoji = random.choice(self.random_emojis)
            return template.format(
                post_text=post_text[:50] + "..." if len(post_text) > 50 else post_text,
                channel_name=channel_name,
                random_emoji=random_emoji
            )
    
    async def test_neuro_comment_access(self, account_id, channel_links):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with db_manager.get_session() as session:
                account = session.query(Account).filter_by(id=account_id).first()
                if not account:
                    raise Exception("Account not found")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            session_string = self.encryption.decrypt(account.session_string)
            client = TelegramClient(
                StringSession(session_string),
                Config.API_ID,
                Config.API_HASH
            )
            
            await client.connect()
            
            if not await client.is_user_authorized():
                raise Exception("Account is not authorized")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–∂–¥–æ–º—É –∫–∞–Ω–∞–ª—É
            results = []
            
            for channel_link in channel_links:
                try:
                    channel_entity = await client.get_entity(channel_link)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    permissions = await client.get_permissions(channel_entity, 'me')
                    
                    can_comment = not permissions.is_banned and (
                        permissions.is_admin or 
                        not getattr(channel_entity, 'default_banned_rights', {}).get('send_messages', False)
                    )
                    
                    results.append({
                        'channel_link': channel_link,
                        'channel_title': channel_entity.title,
                        'can_comment': can_comment,
                        'is_member': True,
                        'error': None
                    })
                    
                except Exception as e:
                    results.append({
                        'channel_link': channel_link,
                        'channel_title': 'Unknown',
                        'can_comment': False,
                        'is_member': False,
                        'error': str(e)
                    })
            
            await client.disconnect()
            
            return {
                'success': True,
                'results': results
            }
            
        except Exception as e:
            logger.error(f"Error testing neuro comment access: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    async def get_neuro_statistics(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with db_manager.get_session() as session:
                neuro_comments = session.query(NeuroComment).join(Account).filter(
                    Account.user_id == user_id
                ).all()
                
                if not neuro_comments:
                    return {
                        'total_settings': 0,
                        'active_settings': 0,
                        'total_comments': 0,
                        'settings': []
                    }
                
                total_settings = len(neuro_comments)
                active_settings = len([nc for nc in neuro_comments if nc.is_active])
                total_comments = sum(nc.total_comments for nc in neuro_comments)
                
                settings = []
                for neuro_comment in neuro_comments:
                    target_channels = json.loads(neuro_comment.target_channels)
                    
                    settings.append({
                        'id': neuro_comment.id,
                        'is_active': neuro_comment.is_active,
                        'target_channels_count': len(target_channels),
                        'target_channels': target_channels,
                        'comment_template': neuro_comment.comment_template,
                        'comments_per_day': neuro_comment.comments_per_day,
                        'total_comments': neuro_comment.total_comments,
                        'last_comment_time': neuro_comment.last_comment_time.isoformat() if neuro_comment.last_comment_time else None,
                        'created_at': neuro_comment.created_at.isoformat(),
                        'account_phone': neuro_comment.account.phone_number
                    })
                
                return {
                    'total_settings': total_settings,
                    'active_settings': active_settings,
                    'total_comments': total_comments,
                    'settings': settings
                }
                
        except Exception as e:
            logger.error(f"Error getting neuro statistics: {e}")
            return {
                'error': str(e)
            }
    
    async def _mark_account_inactive(self, account_id):
        """–û—Ç–º–µ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ"""
        try:
            with db_manager.get_session() as session:
                account = session.query(Account).filter_by(id=account_id).first()
                if account:
                    account.is_active = False
                    session.commit()
                    logger.info(f"Account {account.phone_number} marked as inactive")
        except Exception as e:
            logger.error(f"Error marking account {account_id} as inactive: {e}")
    
    async def _log_neuro_activity(self, user_id, account_id, action_type, target, status, details):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with db_manager.get_session() as session:
                log = ActivityLog(
                    user_id=user_id,
                    account_id=account_id,
                    action_type=action_type,
                    target=target,
                    status=status,
                    details=details
                )
                session.add(log)
                session.commit()
        except Exception as e:
            logger.error(f"Error logging neuro activity: {e}")
    
    async def pause_neuro_comment(self, neuro_comment_id, user_id):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with db_manager.get_session() as session:
                neuro_comment = session.query(NeuroComment).join(Account).filter(
                    NeuroComment.id == neuro_comment_id,
                    Account.user_id == user_id
                ).first()
                
                if not neuro_comment:
                    return {'success': False, 'error': 'Neuro comment setting not found'}
                
                neuro_comment.is_active = False
                session.commit()
                
                return {'success': True, 'message': 'Neuro commenting paused'}
                
        except Exception as e:
            logger.error(f"Error pausing neuro comment {neuro_comment_id}: {e}")
            return {'success': False, 'error': str(e)}
    
    async def resume_neuro_comment(self, neuro_comment_id, user_id):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with db_manager.get_session() as session:
                neuro_comment = session.query(NeuroComment).join(Account).filter(
                    NeuroComment.id == neuro_comment_id,
                    Account.user_id == user_id
                ).first()
                
                if not neuro_comment:
                    return {'success': False, 'error': 'Neuro comment setting not found'}
                
                neuro_comment.is_active = True
                session.commit()
                
                return {'success': True, 'message': 'Neuro commenting resumed'}
                
        except Exception as e:
            logger.error(f"Error resuming neuro comment {neuro_comment_id}: {e}")
            return {'success': False, 'error': str(e)}
    
    async def delete_neuro_comment(self, neuro_comment_id, user_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with db_manager.get_session() as session:
                neuro_comment = session.query(NeuroComment).join(Account).filter(
                    NeuroComment.id == neuro_comment_id,
                    Account.user_id == user_id
                ).first()
                
                if not neuro_comment:
                    return {'success': False, 'error': 'Neuro comment setting not found'}
                
                session.delete(neuro_comment)
                session.commit()
                
                return {'success': True, 'message': 'Neuro comment setting deleted'}
                
        except Exception as e:
            logger.error(f"Error deleting neuro comment {neuro_comment_id}: {e}")
            return {'success': False, 'error': str(e)}

