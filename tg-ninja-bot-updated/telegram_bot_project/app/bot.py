import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from config import Config
from handlers.account_handlers import AccountHandlers
from handlers.parsing_handlers import ParsingHandlers
from handlers.invite_handlers import InviteHandlers
from handlers.broadcast_handlers import BroadcastHandlers
from handlers.neuro_handlers import NeuroHandlers
from database.database import db_manager
from database.models import User

logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.application = None
        self.account_handlers = AccountHandlers()
        self.parsing_handlers = ParsingHandlers()
        self.invite_handlers = InviteHandlers()
        self.broadcast_handlers = BroadcastHandlers()
        self.neuro_handlers = NeuroHandlers()
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.application = Application.builder().token(Config.BOT_TOKEN).build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self._register_handlers()
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            logger.info("Starting Telegram bot...")
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            logger.info("Bot started successfully")
            
        except Exception as e:
            logger.error(f"Failed to start bot: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.application:
            logger.info("Stopping Telegram bot...")
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
            logger.info("Bot stopped successfully")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        app = self.application
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", self.start_command))
        app.add_handler(CommandHandler("help", self.help_command))
        app.add_handler(CommandHandler("menu", self.menu_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        app.add_handler(CommandHandler("add_account", self.account_handlers.add_account_command))
        app.add_handler(CommandHandler("list_accounts", self.account_handlers.list_accounts_command))
        app.add_handler(CommandHandler("remove_account", self.account_handlers.remove_account_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        app.add_handler(CommandHandler("parse_group", self.parsing_handlers.parse_group_command))
        app.add_handler(CommandHandler("parse_status", self.parsing_handlers.parse_status_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
        app.add_handler(CommandHandler("invite_users", self.invite_handlers.invite_users_command))
        app.add_handler(CommandHandler("invite_status", self.invite_handlers.invite_status_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
        app.add_handler(CommandHandler("create_broadcast", self.broadcast_handlers.create_broadcast_command))
        app.add_handler(CommandHandler("list_broadcasts", self.broadcast_handlers.list_broadcasts_command))
        app.add_handler(CommandHandler("stop_broadcast", self.broadcast_handlers.stop_broadcast_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞
        app.add_handler(CommandHandler("setup_neuro", self.neuro_handlers.setup_neuro_command))
        app.add_handler(CommandHandler("neuro_status", self.neuro_handlers.neuro_status_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        app.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
        app.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    async def start_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self._save_user(user)
        
        welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Bot –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Ä–∞—Å—Å—ã–ª–æ–∫!

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ üì± –£–ø—Ä–∞–≤–ª—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫
‚Ä¢ üë• –ü–∞—Ä—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ üì® –°–æ–∑–¥–∞–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
‚Ä¢ üéØ –ò–Ω–≤–∞–π—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—ã
‚Ä¢ üß† –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:
/add_account - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
/list_accounts - –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
/remove_account - –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç

üë• –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
/parse_group - –ü–∞—Ä—Å–∏—Ç—å –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª
/parse_status - –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞

üéØ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥:
/invite_users - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/invite_status - –°—Ç–∞—Ç—É—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞

üì® –†–∞—Å—Å—ã–ª–∫–∏:
/create_broadcast - –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
/list_broadcasts - –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫
/stop_broadcast - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É

üß† –ù–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
/setup_neuro - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
/neuro_status - –°—Ç–∞—Ç—É—Å –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

üìã –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
        """
        
        await update.message.reply_text(help_text)
    
    async def menu_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
        keyboard = [
            [
                InlineKeyboardButton("üì± –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="accounts_menu"),
                InlineKeyboardButton("üë• –ü–∞—Ä—Å–∏–Ω–≥", callback_data="parsing_menu")
            ],
            [
                InlineKeyboardButton("üéØ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥", callback_data="invite_menu"),
                InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∏", callback_data="broadcast_menu")
            ],
            [
                InlineKeyboardButton("üß† –ù–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥", callback_data="neuro_menu"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_menu")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def handle_callback(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "main_menu":
            await self.menu_command(update, context)
        elif data == "help":
            await self.help_command(update, context)
        elif data == "accounts_menu":
            await self.account_handlers.accounts_menu(update, context)
        elif data == "parsing_menu":
            await self.parsing_handlers.parsing_menu(update, context)
        elif data == "invite_menu":
            await self.invite_handlers.invite_menu(update, context)
        elif data == "broadcast_menu":
            await self.broadcast_handlers.broadcast_menu(update, context)
        elif data == "neuro_menu":
            await self.neuro_handlers.neuro_menu(update, context)
        elif data.startswith("account_"):
            await self.account_handlers.handle_callback(update, context)
        elif data.startswith("parse_"):
            await self.parsing_handlers.handle_callback(update, context)
        elif data.startswith("invite_"):
            await self.invite_handlers.handle_callback(update, context)
        elif data.startswith("broadcast_"):
            await self.broadcast_handlers.handle_callback(update, context)
        elif data.startswith("neuro_"):
            await self.neuro_handlers.handle_callback(update, context)
    
    async def handle_document(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        document = update.message.document
        
        if document.file_name.endswith('.txt'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self.parsing_handlers.handle_user_list_file(update, context)
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)"
            )
    
    async def handle_text(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        user_state = context.user_data.get('state')
        
        if user_state:
            if user_state.startswith('add_account_'):
                await self.account_handlers.handle_account_input(update, context)
            elif user_state.startswith('parse_'):
                await self.parsing_handlers.handle_parse_input(update, context)
            elif user_state.startswith('invite_'):
                await self.invite_handlers.handle_invite_input(update, context)
            elif user_state.startswith('broadcast_'):
                await self.broadcast_handlers.handle_broadcast_input(update, context)
            elif user_state.startswith('neuro_'):
                await self.neuro_handlers.handle_neuro_input(update, context)
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            )
    
    async def _save_user(self, telegram_user):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with db_manager.get_session() as session:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = session.query(User).filter_by(
                    telegram_id=telegram_user.id
                ).first()
                
                if not user:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = User(
                        telegram_id=telegram_user.id,
                        username=telegram_user.username,
                        first_name=telegram_user.first_name,
                        last_name=telegram_user.last_name,
                        is_admin=(telegram_user.id == Config.ADMIN_USER_ID)
                    )
                    session.add(user)
                    logger.info(f"New user registered: {telegram_user.id}")
                else:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user.username = telegram_user.username
                    user.first_name = telegram_user.first_name
                    user.last_name = telegram_user.last_name
                    
                session.commit()
                
        except Exception as e:
            logger.error(f"Failed to save user {telegram_user.id}: {e}")

