import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database.database import db_manager
from database.models import User
from handlers.account_handlers import AccountHandlers
from handlers.parsing_handlers import ParsingHandlers
from handlers.invite_handlers import InviteHandlers
from handlers.broadcast_handlers import BroadcastHandlers
from handlers.neuro_handlers import NeuroHandlers

logger = logging.getLogger(__name__)

class MainHandlers:
    def __init__(self):
        self.account_handlers = AccountHandlers()
        self.parsing_handlers = ParsingHandlers()
        self.invite_handlers = InviteHandlers()
        self.broadcast_handlers = BroadcastHandlers()
        self.neuro_handlers = NeuroHandlers()
    
    def set_scheduler(self, scheduler):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.broadcast_handlers.set_scheduler(scheduler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        first_name = update.effective_user.first_name or "User"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with db_manager.get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                user = User(
                    telegram_id=user_id,
                    username=username,
                    first_name=first_name
                )
                session.add(user)
                session.commit()
                
                welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TG Ninja Bot, {first_name}!

ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–æ—â–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram:

üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

üë• –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ —É–¥–æ–±–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

üì® –ê–≤—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∏
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–ø–ø

üß† –ù–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ò–ò-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç–∞–º –≤ –∫–∞–Ω–∞–ª–∞—Ö
‚Ä¢ –£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚ö° –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –≤ –≥—Ä—É–ø–ø—ã
‚Ä¢ –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
                """
            else:
                welcome_text = f"""
üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é:
                """
        
        keyboard = [
            [
                InlineKeyboardButton("üì± –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="accounts_menu"),
                InlineKeyboardButton("üë• –ü–∞—Ä—Å–∏–Ω–≥", callback_data="parsing_menu")
            ],
            [
                InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∏", callback_data="broadcast_menu"),
                InlineKeyboardButton("üß† –ù–µ–π—Ä–æ", callback_data="neuro_menu")
            ],
            [
                InlineKeyboardButton("‚ö° –ò–Ω–≤–∞–π—Ç–∏–Ω–≥", callback_data="invite_menu"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_menu")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu"),
                InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help_menu")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ TG Ninja Bot

üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/add_account - –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/list_accounts - –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
/create_broadcast - –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
/list_broadcasts - –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫
/setup_neuro - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
/neuro_status - –°—Ç–∞—Ç—É—Å –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ Telegram –∞–∫–∫–∞—É–Ω—Ç—ã —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–¥ –∏–∑ SMS
‚Ä¢ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å–æ–º –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é

üë• –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —Å–ø–∏—Å–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ txt —Ñ–∞–π–ª–∞—Ö
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∏ –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏

üì® –ê–≤—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∏:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–ø–ø—ã –∏ –∞–∫–∫–∞—É–Ω—Ç—ã

üß† –ù–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —à–∞–±–ª–æ–Ω—ã –∏ —á–∞—Å—Ç–æ—Ç—É
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤

‚ö° –ò–Ω–≤–∞–π—Ç–∏–Ω–≥:
‚Ä¢ –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –ª–∏–º–∏—Ç–æ–≤ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Telegram
‚Ä¢ –ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑—É–º–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–∏–º–∏—Ç–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤

üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:
–î–æ—Å—Ç—É–ø–Ω–∞ —É–¥–æ–±–Ω–∞—è –≤–µ–±-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(help_text, reply_markup=reply_markup)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user_id = update.effective_user.id
        
        try:
            with db_manager.get_session() as session:
                user = session.query(User).filter_by(telegram_id=user_id).first()
                if not user:
                    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                from database.models import Account, AutoPost, NeuroComment, ActivityLog
                
                total_accounts = session.query(Account).filter_by(user_id=user.id).count()
                active_accounts = session.query(Account).filter_by(
                    user_id=user.id, is_active=True, is_banned=False
                ).count()
                
                total_broadcasts = session.query(AutoPost).filter_by(user_id=user.id).count()
                active_broadcasts = session.query(AutoPost).filter_by(
                    user_id=user.id, is_active=True
                ).count()
                
                total_neuro = session.query(NeuroComment).filter_by(user_id=user.id).count()
                active_neuro = session.query(NeuroComment).filter_by(
                    user_id=user.id, is_active=True
                ).count()
                
                # –ü–æ–¥—Å—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                total_sent = session.query(AutoPost).filter_by(user_id=user.id).with_entities(
                    session.query(AutoPost.total_sent).label('sum')
                ).scalar() or 0
                
                # –ü–æ–¥—Å—á–µ—Ç –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                total_comments = session.query(NeuroComment).filter_by(user_id=user.id).with_entities(
                    session.query(NeuroComment.total_comments).label('sum')
                ).scalar() or 0
                
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                last_activity = session.query(ActivityLog).filter_by(user_id=user.id).order_by(
                    ActivityLog.created_at.desc()
                ).first()
            
            stats_text = f"""
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%Y-%m-%d')}

üì± –ê–∫–∫–∞—É–Ω—Ç—ã:
‚Ä¢ –í—Å–µ–≥–æ: {total_accounts}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_accounts}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {total_accounts - active_accounts}

üì® –†–∞—Å—Å—ã–ª–∫–∏:
‚Ä¢ –í—Å–µ–≥–æ: {total_broadcasts}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_broadcasts}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_sent}

üß† –ù–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–∫: {total_neuro}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_neuro}
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_comments}

üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
{last_activity.created_at.strftime('%Y-%m-%d %H:%M') if last_activity else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
{last_activity.action_type if last_activity else ''}
            """
            
            keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(stats_text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"Error getting stats: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        data = query.data
        
        try:
            await query.answer()
            
            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if data == "main_menu":
                await self.show_main_menu(update, context)
            
            # –ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            elif data == "accounts_menu":
                await self.account_handlers.accounts_menu(update, context)
            elif data.startswith("account_"):
                await self.account_handlers.handle_callback(update, context)
            
            # –ú–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞
            elif data == "parsing_menu":
                await self.parsing_handlers.parsing_menu(update, context)
            elif data.startswith("parsing_"):
                await self.parsing_handlers.handle_callback(update, context)
            
            # –ú–µ–Ω—é –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
            elif data == "invite_menu":
                await self.invite_handlers.invite_menu(update, context)
            elif data.startswith("invite_"):
                await self.invite_handlers.handle_callback(update, context)
            
            # –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫
            elif data == "broadcast_menu":
                await self.broadcast_handlers.broadcast_menu(update, context)
            elif data.startswith("broadcast_"):
                await self.broadcast_handlers.handle_callback(update, context)
            
            # –ú–µ–Ω—é –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            elif data == "neuro_menu":
                await self.neuro_handlers.neuro_menu(update, context)
            elif data.startswith("neuro_"):
                await self.neuro_handlers.handle_callback(update, context)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            elif data == "stats_menu":
                await self.stats_command(update, context)
            
            # –ü–æ–º–æ—â—å
            elif data == "help_menu":
                await self.help_command(update, context)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            elif data == "settings_menu":
                await self.show_settings_menu(update, context)
            
        except Exception as e:
            logger.error(f"Error handling callback query {data}: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def show_main_menu(self, update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        first_name = update.effective_user.first_name or "User"
        
        text = f"""
üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - {first_name}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:
        """
        
        keyboard = [
            [
                InlineKeyboardButton("üì± –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="accounts_menu"),
                InlineKeyboardButton("üë• –ü–∞—Ä—Å–∏–Ω–≥", callback_data="parsing_menu")
            ],
            [
                InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∏", callback_data="broadcast_menu"),
                InlineKeyboardButton("üß† –ù–µ–π—Ä–æ", callback_data="neuro_menu")
            ],
            [
                InlineKeyboardButton("‚ö° –ò–Ω–≤–∞–π—Ç–∏–Ω–≥", callback_data="invite_menu"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_menu")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu"),
                InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help_menu")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_settings_menu(self, update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        text = """
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã

–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
        """
        
        keyboard = [
            [InlineKeyboardButton("üîë API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_api")],
            [InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="settings_security")],
            [InlineKeyboardButton("üìä –õ–∏–º–∏—Ç—ã", callback_data="settings_limits")],
            [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def handle_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        state = context.user_data.get('state')
        
        if not state:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
            await update.message.reply_text(
                "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            )
            return
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
        if state.startswith('account_'):
            await self.account_handlers.handle_account_input(update, context)
        elif state.startswith('parsing_'):
            await self.parsing_handlers.handle_parsing_input(update, context)
        elif state.startswith('invite_'):
            await self.invite_handlers.handle_invite_input(update, context)
        elif state.startswith('broadcast_'):
            await self.broadcast_handlers.handle_broadcast_input(update, context)
        elif state.startswith('neuro_'):
            await self.neuro_handlers.handle_neuro_input(update, context)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–±—Ä–æ—Å–∞."
            )
            context.user_data.clear()
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        state = context.user_data.get('state')
        
        if state and state.startswith('parsing_'):
            await self.parsing_handlers.handle_document(update, context)
        elif state and state.startswith('invite_'):
            await self.invite_handlers.handle_document(update, context)
        else:
            await update.message.reply_text(
                "‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."
            )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")
        
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

